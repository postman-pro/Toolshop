{
	"info": {
		"_postman_id": "2f90f032-0f34-4cdb-890d-d091931d2114",
		"name": "Toolshop API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38047370"
	},
	"item": [
		{
			"name": "/Brand_DefRequestANDNegTests",
			"item": [
				{
					"name": "GET_BrandDefaultRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
									"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
									"});\r",
									"\r",
									"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
									"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
									"});\r",
									"\r",
									"//I don’t check these headers because:\r",
									"//access-control-expose-headers – Files are not uploaded via the API.\r",
									"//Cache-Control – There is no need to manage data caching.\r",
									"//charset – browsers and clients automatically handle encoding based on the server response.\r",
									"//transfer-encoding – It is handled automatically.\r",
									"\r",
									"pm.test(\"Response is Array and inside >=2 objects\", \r",
									"function isValidResponse(response) {\r",
									"  return Array.isArray(response) && \r",
									"         response.length >= 2 && \r",
									"         response.every(item => typeof item === 'object' && item !== null);}\r",
									");\r",
									"\r",
									"\r",
									"let schema =\r",
									"{\r",
									"  \"type\": \"array\",\r",
									"  \"items\": \r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"slug\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"    }    \r",
									"}\r",
									"\r",
									"pm.test(\"schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/brands",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"brands"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_BrandWithoutSSL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request protocol HTTP\", function() {\r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"http\")\r",
									"});\r",
									"\r",
									"// EPECTED RESULT: no ER in Swagger but according to my opinion here should be status 301 Moved permanently\r",
									"//AND let's say that in response body we should get the HTML => no need to check the Schema in this test\r",
									"// so, there is 1 Bug and it's documented in Jira\r",
									"pm.test(\"Status code is 301\", function () {\r",
									"    pm.response.to.have.status(301);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
									"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
									"});\r",
									"\r",
									"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
									"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/brands",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"brands"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_BrandInvalidURL%AtTheEnd",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"// There is no description of this error in the Swagger. \r",
									"// Let's say ER is this status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// There is no header description for this case\r",
									"// Let's say I got the expected header\r",
									"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
									"     pm.expect(pm.response.headers.get('Connection')).to.include('close');\r",
									"});\r",
									"\r",
									"// There is no header description for this case\r",
									"// Let's say I got the expected header\r",
									"pm.test(\" header  Content-Type=text/html; charset=iso-8859-1\", function () {\r",
									"     pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html; charset=iso-8859-1');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/brands%",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"brands%"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_BrandNonExistURL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
									"     pm.expect(pm.response.headers.get('Connection')).to.include('close');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\" header  Content-Type=application/json\", function () {\r",
									"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is correct: Resource not found\", function () {\r",
									"     pm.expect(pm.response.json().message).to.equal(\"Resource not found\");\r",
									"});\r",
									"\r",
									"let schema =\r",
									"{\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  }\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/brands5",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"brands5"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_BrandMethodNotAllowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// There is no header description for this case\r",
									"// Let's say I got the expected header\r",
									"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
									"     pm.expect(pm.response.headers.get('Connection')).to.include('close');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\" header  Content-Type=application/json\", function () {\r",
									"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is correct: Method is not allowed for the requested route\", function () {\r",
									"     pm.expect(pm.response.json().message).to.equal(\"Method is not allowed for the requested route\");\r",
									"});\r",
									"\r",
									"let schema =\r",
									"{\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  }\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/brands",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"brands"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}