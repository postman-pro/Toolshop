{
	"info": {
		"_postman_id": "2f90f032-0f34-4cdb-890d-d091931d2114",
		"name": "ToolshopAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38047370"
	},
	"item": [
		{
			"name": "/Brand",
			"item": [
				{
					"name": "POST_BrandCreate",
					"item": [
						{
							"name": "20_POST_BrandCreate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//I need to set a collection variable 'post_brand_id'\r",
											"//because I will use it in another request below\r",
											"let jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"post_brand_id\", jsonData.id);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"let post_name = pm.variables.get(\"post_name\"); // Define post_name variable\r",
											"let post_slug = pm.variables.get(\"post_slug\");\r",
											"\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"name\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [post_name]\r",
											"    },\r",
											"    \"slug\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [post_slug]\r",
											"  },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  //in Swagger name, slug, id are not required\r",
											"  //but we have only these 3 fields in the response, so let's check them as required\r",
											"  \"required\": [\r",
											"    \"name\",\r",
											"    \"slug\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//I need to set a collection variables 'post_name', 'post_slug' with random numbers\r",
											"//because I will use them in another request below\r",
											"\r",
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.collectionVariables.set(\"post_name\", `Brand${randomInt}`);\r",
											"pm.collectionVariables.set(\"post_slug\", `brand-${randomInt}`);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{post_name}}\",\r\n  \"slug\": \"{{post_slug}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "21_POST_BrandCreateExistSlug",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//in the Swagger there is no info about this case - need to add description about it\r",
											"//but in the response body I got understandable message and code 422. So, new Brand is not created\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"header Connection=Upgrade, close\", function () {\r",
											"    pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\"header Content-Type=application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"error message is correct = A brand already exists with this slug.\", function () {\r",
											"    pm.expect(pm.response.json().slug[0]).to.eql(\"A brand already exists with this slug.\")\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//in the body I need to use name different from the previous test 20_POST_BrandCreate\r",
											"//so, here I set a new variable \"diff_post_name\"\r",
											"\r",
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.collectionVariables.set(\"diff_post_name\", `Brand${randomInt}`);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name{{diff_post_name}}\",   // I use a new name\r\n  \"slug\": \"{{post_slug}}\"             // but slug is the same as 20_POST_BrandCreate\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "22_POST_BrandCreateExistName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Swagger has no info about this case - need to add description about it\r",
											"//let's say it's impossible to create a brand with the same name \r",
											"//so, in this case we have a Bug \"POST_Possible to create a brand with the same name\" \r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"//error message should be like this, for example\r",
											"pm.test(\"error message is correct = A brand already exists with this name.\", function() {\r",
											"        pm.expect(pm.response.json().name[0]).to.eql(\"A brand already exists with this name.\")\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//in the request body I need to use slug different from the previous test 20_POST_BrandCreate\r",
											"//so, here I set a new variable \"diff_post_slug\"\r",
											"\r",
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.collectionVariables.set(\"diff_post_slug\", `Brand${randomInt}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{post_name}}\",\r\n  \"slug\": \"slug{{diff_post_slug}}\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "23_POST_BrandCreateNameNullSlugAbsent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Why I do two different negative tests in one test: \r",
											"//when simultaneously entering invalid values into both required fields in the response body, an error is received separately for each of the required fields, so I can perform this check while simultaneously entering negative data\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"// For simplicity, here in my portfolio I check only a few paired negative values ​​in both mandatory fields. There are many more of these checks. \r",
											"//To optimize the process, I used an online tool to generate pairs of values.\r",
											"\r",
											"//Swagger has no info about these error messages - need to add description about it\r",
											"//but in the response body we have understandable message for name and slug and code 422. So, new Brand is not created\r",
											"pm.test(\"SLUG error message is correct = The slug field is required.\", function() {\r",
											"        pm.expect(pm.response.json().slug[0]).to.eql(\"The slug field is required.\")\r",
											"})\r",
											"\r",
											"pm.test(\"NAME error message is correct = The name field is required.\", function () {\r",
											"    pm.expect(pm.response.json().name[0]).to.eql(\"The name field is required.\")\r",
											"    })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "24_POST_BrandCreateNameIntegerSlugEmpty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"// For simplicity, here in my portfolio I check only a few paired negative values ​​in both mandatory fields. There are many more of these checks. \r",
											"//To optimize the process, I used an online tool to generate pairs of values.\r",
											"\r",
											"//Swagger has no info about these error messages - need to add description about it\r",
											"//but in the response body we have understandable message for name and slug and code 422. So, new Brand is not created\r",
											"pm.test(\"SLUG error message is correct = The slug field is required.\", function() {\r",
											"        pm.expect(pm.response.json().slug[0]).to.eql(\"The slug field is required.\")\r",
											"})\r",
											"\r",
											"pm.test(\"NAME error message is correct = The name field must be a string.\", function () {\r",
											"    pm.expect(pm.response.json().name[0]).to.eql(\"The name field must be a string.\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": 987,\r\n  \"slug\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "25_POST_BrandCreateNameSymbolSlugInteger",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Swagger has no info about these error messages - need to add description about it\r",
											"//but in the response body I have understandable message for slug and code 422. So, new Brand is not created\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"// For simplicity, here in my portfolio I check only a few paired negative values ​​in both mandatory fields. There are many more of these checks. \r",
											"//To optimize the process, I used an online tool to generate pairs of values.\r",
											"\r",
											"pm.test(\"SLUG error message is correct = The slug field must be a string.\", function() {\r",
											"        pm.expect(pm.response.json().slug[0]).to.eql(\"The slug field must be a string.\")\r",
											"})\r",
											"\r",
											"//Bug: No error message for name field if entered data is symbol (\"name\"= \"%\")  \r",
											"//let's say should be error message like this\r",
											"pm.test(\"NAME error message is correct = The name field must only contain letters, numbers, dashes, and underscores.\", function () {\r",
											"    pm.expect(pm.response.json().name[0]).to.eql(\"The name field must only contain letters, numbers, dashes, and underscores.\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"%\",\r\n  \"slug\": 987\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "26_POST_BrandCreateNameAbsentSlugNull",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Swagger has no info about these error messages - need to add description about it\r",
											"//but in the response body I have understandable message for name and slug and code 422. So, new Brand is not created\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"// For simplicity, here in my portfolio I check only a few paired negative values ​​in both mandatory fields. There are many more of these checks. \r",
											"//To optimize the process, I used an online tool to generate pairs of values.\r",
											"\r",
											"\r",
											"pm.test(\"SLUG error message is correct = The slug field is required.\", function() {\r",
											"        pm.expect(pm.response.json().slug[0]).to.eql(\"The slug field is required.\")\r",
											"})\r",
											"\r",
											"pm.test(\"NAME error message is correct = The name field is required.\", function () {\r",
											"    pm.expect(pm.response.json().name[0]).to.eql(\"The name field is required.\")\r",
											"    })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"slug\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "27_POST_BrandCreateNameEmptySlugSymbol",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Swagger has no info about these error messages - need to add description about it\r",
											"//but in the response body I got understandable message for name and slug and code 422. So, new Brand is not created\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"// For simplicity, here in my portfolio I check only a few paired negative values ​​in both mandatory fields. There are many more of these checks. \r",
											"//To optimize the process, I used an online tool to generate pairs of values.\r",
											"\r",
											"\r",
											"pm.test(\"SLUG error message is correct = The slug field must only contain letters, numbers, dashes, and underscores.\", function() {\r",
											"        pm.expect(pm.response.json().slug[0]).to.eql(\"The slug field must only contain letters, numbers, dashes, and underscores.\")\r",
											"})\r",
											"\r",
											"pm.test(\"NAME error message is correct = The name field is required.\", function () {\r",
											"    pm.expect(pm.response.json().name[0]).to.eql(\"The name field is required.\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"slug\": \"%\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "28_POST_BrandCreateMethodNotAllowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"//let's say this is expected header\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\" error message is correct = Method is not allowed for the requested route\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Method is not allowed for the requested route\")\r",
											"    })\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.variables.set(\"wrong_method_post_name\", `Brand${randomInt}`);\r",
											"pm.variables.set(\"wrong_method_post_slug\", `brand-${randomInt}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{wrong_method_post_name}}\",\r\n  \"slug\": \"{{wrong_method_post_slug}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "29_POST_BrandCreateUppercaseFieldNameValues",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//in the Swagger there is no info about this case - need to add description about it\r",
											"//but in the response I got code 201 Created. So, new Brand is created correctly\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"    pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"let uppercase_post_name = pm.variables.get(\"uppercase_post_name\"); // Define uppercase_post_name variable\r",
											"let uppercase_post_slug = pm.variables.get(\"uppercase_post_slug\");\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"name\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [uppercase_post_name]\r",
											"    },\r",
											"    \"slug\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [uppercase_post_slug]\r",
											"  },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  //in Swagger name, slug, id are not required\r",
											"  //but I have only 3 fields in the response, so let's check them as required\r",
											"  \"required\": [\r",
											"    \"name\",\r",
											"    \"slug\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//I set a new uppercase Name and Slug variables\r",
											"\r",
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.variables.set(\"uppercase_post_name\", `BRAND${randomInt}`);\r",
											"pm.variables.set(\"uppercase_post_slug\", `BRAND-${randomInt}`);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{uppercase_post_name}}\",\r\n  \"slug\": \"{{uppercase_post_slug}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "30_POST_BrandCreateFieldsOrderVariation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//in the Swagger there is no info about this case - need to add description about it\r",
											"//but in the response I got code 201 Created. So, new Brand is created correctly\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"//let's say this is expected header\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"let fields_order_variation_post_name = pm.variables.get(\"fields_order_variation_post_name\");\r",
											"let fields_order_variation_post_slug = pm.variables.get(\"fields_order_variation_post_slug\");\r",
											"\r",
											"//the scheme should be as described in the documentation - let's say this schema is correct\r",
											"//and response is according to documentation\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"name\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [fields_order_variation_post_name]\r",
											"    },\r",
											"    \"slug\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [fields_order_variation_post_slug]\r",
											"  },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  //in Swagger name, slug, id are not required\r",
											"  //but we have only 3 fields in the response, so let's check them as required\r",
											"  \"required\": [\r",
											"    \"name\",\r",
											"    \"slug\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//I create a new variables for this test\r",
											"\r",
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.collectionVariables.set(\"fields_order_variation_post_name\", `Brand${randomInt}`);\r",
											"pm.collectionVariables.set(\"fields_order_variation_post_slug\", `brand-${randomInt}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"slug\": \"{{fields_order_variation_post_name}}\",\r\n  \"name\": \"{{fields_order_variation_post_name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "31_POST_BrandCreateUppercaseFieldNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//This test failed with code 422 and understandable error messages\r",
											"//this is not important bug and there is no info about it in Swagger  \r",
											"//so, I can create a bug \"Field names are case sensitive\" with Severity S4 or S5 (Minor or Trivial)\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"let uppercase_field_NAME_post_name = pm.variables.get(\"uppercase_field_NAME_post_name\");\r",
											"let uppercase_field_SLUG_post_slug = pm.variables.get(\"uppercase_field_SLUG_post_slug\");\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"name\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [uppercase_field_NAME_post_name]\r",
											"    },\r",
											"    \"slug\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [uppercase_field_SLUG_post_slug]\r",
											"  },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  //in Swagger name, slug, id are not required\r",
											"  //but we have only 3 fields in the response, so let's check them as required\r",
											"  \"required\": [\r",
											"    \"name\",\r",
											"    \"slug\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//I create a new variables for this test\r",
											"\r",
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.variables.set(\"uppercase_field_NAME_post_name\", `Brand${randomInt}`);\r",
											"pm.variables.set(\"uppercase_field_SLUG_post_slug\", `brand-${randomInt}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"NAME\": \"{{uppercase_field_NAME_post_name}}\",\r\n  \"SLUG\": \"{{uppercase_field_SLUG_post_slug}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "32_POST_BrandCreateMaxLengthFieldsValue160",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//there is no info in Swagger about max length for both fields, so let's check it\r",
											"//I know already the error message text, so I check it in this test\r",
											"//start from 160 letters\r",
											"//in this case I got understandable error message for both name and slug\r",
											"\r",
											"//But for slug there is additional error message \"The slug field must only contain letters, numbers, dashes, and underscores.\", so this is a bug \"POST_Wrong additional error message for slug in case value > 120 letters\" (according to the next test, I know about >120 letters, not 160 )\r",
											"\r",
											"//let's say code 422 is expected\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"//let's say this is expected header\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Name error message is correct = The name field must not be greater than 120 characters.\", function () {\r",
											"    pm.expect(pm.response.json().name[0]).to.eql(\"The name field must not be greater than 120 characters.\")\r",
											"});\r",
											"\r",
											"pm.test(\"Slug error message is correct = The slug field must not be greater than 120 characters.\", function() {\r",
											"    pm.expect(pm.response.json().slug[0]).to.eql(\"The slug field must not be greater than 120 characters.\")\r",
											"\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an\",\r\n  \"slug\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "33_POST_BrandCreateMaxLengthFieldsValue121",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//in this case I got understandable error message\r",
											"//Error 422 is expected\r",
											"//For slug field there is one more additional error message and there is bug already according to previous test\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\" error message is correct = The name field must not be greater than 120 characters.\", function () {\r",
											"    pm.expect(pm.response.json().name[0]).to.eql(\"The name field must not be greater than 120 characters.\")\r",
											"    });\r",
											"\r",
											"    pm.test(\" error message is correct = The slug field must not be greater than 120 characters.\", function () {\r",
											"    pm.expect(pm.response.json().slug[0]).to.eql(\"The slug field must not be greater than 120 characters.\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard d\",\r\n  \"slug\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard d\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "34_POST_BrandCreateMaxLengthFieldsValue120",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//here I got an error code 422 with incorrect error message\r",
											"//because max length is 120 letters and this test should Pass\r",
											"//so, I create a bug \"POST_Response error code 422 while field values have max length 120 characters\"\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"name\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standardr\"]\r",
											"    },\r",
											"    \"slug\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standardr\"]\r",
											"  },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  //in Swagger name, slug, id are not required\r",
											"  //but we have only 3 fields in the response, so let's check them as required\r",
											"  \"required\": [\r",
											"    \"name\",\r",
											"    \"slug\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standardr\",\r\n  \"slug\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standardr\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "35_POST_BrandCreateMaxLengthFieldsValue119",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//here I got an error code 422 with incorrect error message\r",
											"//because max length is 120 letters and this test should Pass\r",
											"//so, I create a bug \"POST_Response error code 422 while field values have length 119 characters\"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"name\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standardr\"]\r",
											"    },\r",
											"    \"slug\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standardr\"]\r",
											"  },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  //in Swagger name, slug, id are not required\r",
											"  //but we have only 3 fields in the response, so let's check them as required\r",
											"  \"required\": [\r",
											"    \"name\",\r",
											"    \"slug\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standardr\",\r\n  \"slug\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standardr\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "36_POST_BrandCreateArrayInsteadObject",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//in response I got not clear error message\r",
											"//so, here is a bug \"POST_Incorrect error message in case not well formed JSON:Array instead an Object\"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//let's say should be the error message like this:\r",
											"pm.test(\"Error message is correct = Invalid JSON format: expected an object but received an array\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Invalid JSON format: expected an object but received an array\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.variables.set(\"array_instead_object_post_name\", `Brand${randomInt}`);\r",
											"pm.variables.set(\"array_instead_object_post_slug\", `Brand${randomInt}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  \"name\": \"{{array_instead_object_post_name}}\",\r\n  \"slug\": \"{{array_instead_object_post_slug}}\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "37_POST_BrandCreateCommaAtTheEnd",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//in response I got not clear error message\r",
											"//so, here is a bug \"POST_Incorrect error message in case not well formed JSON:Comma at the end\"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//let's say should an error message like this\r",
											"pm.test(\"error message is correct = Invalid JSON format: Comma at the end\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Invalid JSON format: Comma at the end\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.collectionVariables.set(\"comma_at_the_end_post_name\", `Brand${randomInt}`);\r",
											"pm.collectionVariables.set(\"comma_at_the_end_post_slug\", `Brand${randomInt}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{comma_at_the_end_post_name}}\",\r\n  \"slug\": \"{{comma_at_the_end_post_slug}}\",\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "38_POST_BrandCreateNoCommaAtAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//in response I got not clear error message\r",
											"//so, here is a bug \"POST_Incorrect error message in case not well formed JSON:NoCommaAtAll\"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//let's say should be an error message like this\r",
											"pm.test(\"error message is correct = Not well formed JSON\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Not well formed JSON\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.variables.set(\"no_comma_post_name\", `Brand${randomInt}`);\r",
											"pm.variables.set(\"no_comma_post_slug\", `Brand${randomInt}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{no_comma_post_name}}\"\r\n  \"slug\": \"{{no_comma_post_slug}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "39_POST_BrandCreateIncompleteKey-ValueFormat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//in response I got not clear error message\r",
											"//so, here is a bug \"POST_Incorrect error message in case not well formed JSON:IncompleteKey-ValueFormat\"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"error message is correct = Example of the correct message\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Example of the correct message\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.variables.set(\"incomplete_key-value_post_name\", `Brand${randomInt}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{incomplete_key-value_post_name}}\",\r\n  \"slug\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET_Brand",
					"item": [
						{
							"name": "1_GET_BrandDefaultRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"get_brand_id\", pm.response.json()[0].id);\r",
											"pm.collectionVariables.set(\"get_brand_name\", pm.response.json()[0].name);\r",
											"pm.collectionVariables.set(\"get_brand_slug\", pm.response.json()[0].slug);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"//I don’t check these headers because:\r",
											"//access-control-expose-headers – Files are not uploaded via the API.\r",
											"//Cache-Control – There is no need to manage data caching.\r",
											"//charset – browsers and clients automatically handle encoding based on the server response.\r",
											"//transfer-encoding – It is handled automatically.\r",
											"\r",
											"pm.test(\"Response is Array and inside >=2 objects\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(Array.isArray(jsonData), \"Response should be an array\").to.be.true;\r",
											"    pm.expect(jsonData.length, \"Array should have at least 2 objects\").to.be.at.least(2);\r",
											"    pm.expect(jsonData.every(item => typeof item === 'object' && item !== null), \"Each item should be an object\").to.be.true;\r",
											"});\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"array\",\r",
											"  \"items\": \r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"slug\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"    }    \r",
											"}\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ConnectioN",
										"value": "KeeP-AliVe",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "2_GET_BrandWithoutSSL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request protocol HTTP\", function() {\r",
											"    pm.expect(pm.request.url.protocol).to.eql(\"http\")\r",
											"});\r",
											"\r",
											"// no description for this case in Swagger but according to my opinion here should be status 301 Moved permanently\r",
											"//AND let's say that in response body we should get the HTML => no need to check the Schema in this test\r",
											"// so, there is a Bug \"GET_Status code 200 instead of 301 for http request\"\r",
											"\r",
											"pm.test(\"Status code is 301\", function () {\r",
											"    pm.response.to.have.status(301);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://api.practicesoftwaretesting.com/brands",
									"protocol": "http",
									"host": [
										"api",
										"practicesoftwaretesting",
										"com"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "3_GET_BrandInvalidURL%AtTheEnd",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"// There is no description of this error in the Swagger. \r",
											"// Let's say ER is this status code 400\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"// There is no header description for this case\r",
											"// Let's say I got the expected header\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('close');\r",
											"});\r",
											"\r",
											"// There is no header description for this case\r",
											"// Let's say I got the expected header\r",
											"pm.test(\" header  Content-Type=text/html; charset=iso-8859-1\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html; charset=iso-8859-1');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/brands%",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands%"
									]
								}
							},
							"response": []
						},
						{
							"name": "4_GET_BrandNonExistURL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('close');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct: Resource not found\", function () {\r",
											"     pm.expect(pm.response.json().message).to.equal(\"Resource not found\");\r",
											"});\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/brand",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brand"
									]
								}
							},
							"response": []
						},
						{
							"name": "5_GET_BrandUppercaseURL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//there is no information about this case in Swagger\r",
											"//but normally url should not be case sensitive\r",
											"//so, here is a bug \"URL https://api.practicesoftwaretesting.com/BRANDS is case sensitive\"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response is Array and inside >=2 objects\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(Array.isArray(jsonData), \"Response should be an array\").to.be.true;\r",
											"    pm.expect(jsonData.length, \"Array should have at least 2 objects\").to.be.at.least(2);\r",
											"    pm.expect(jsonData.every(item => typeof item === 'object' && item !== null), \"Each item should be an object\").to.be.true;\r",
											"});\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"array\",\r",
											"  \"items\": \r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"slug\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"    }    \r",
											"}\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/BRANDS",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BRANDS"
									]
								}
							},
							"response": []
						},
						{
							"name": "6_GET_BrandMethodNotAllowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"// There is no header description for this case\r",
											"// Let's say I got the expected header\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('close');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct: Method is not allowed for the requested route\", function () {\r",
											"     pm.expect(pm.response.json().message).to.equal(\"Method is not allowed for the requested route\");\r",
											"});\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET_BrandID",
					"item": [
						{
							"name": "7_GET_BrandByID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"let schema =\r",
											"\r",
											"     {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"slug\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"    }    \r",
											"\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"id in URL = id in JSON\", function() {\r",
											"    let idURL = pm.request.url.path[1];\r",
											"     let idJSON = pm.response.json().id;\r",
											"     pm.expect(idJSON).to.eql(idURL);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{post_brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{post_brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8_GET_BrandByIDUppercaseID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//I have ID number with lower case\r",
											"//so, here I check GET request with the same ID but uppercase\r",
											"//to check that the ID in the URL is equal to the ID in the response, I convert the ID from the URL to lowercase in the test (see test below)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"//ID is not a constant, so I check it separately, not inside the schema, using \"enum\": [post_brand_id]\r",
											"pm.test(\"id in URL = id in JSON\", function() {\r",
											"     let idURL = pm.request.url.path[1].toLowerCase(); \r",
											"     let idJSON = pm.response.json().id;\r",
											"     pm.expect(idJSON).to.eql(idURL);\r",
											"});\r",
											"\r",
											"//the same for check slug and name:\r",
											"\r",
											"pm.test(\"Response contains correct brand name and slug\", function () {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json.name).to.eql(pm.collectionVariables.get(\"post_name\"));\r",
											"    pm.expect(json.slug).to.eql(pm.collectionVariables.get(\"post_slug\"));\r",
											"});\r",
											"\r",
											"let schema =\r",
											"\r",
											"     {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"string\",\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"slug\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"    }    \r",
											"\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//I check if ID is uppercase and if no ->> convert it to uppercase and set ->> make request ->> check (in post-response) if I got the same ID in the response\r",
											"\r",
											"let brandId = pm.variables.get(\"post_brand_id\");\r",
											"console.log(\"brandId variable value:\", brandId);\r",
											"\r",
											"if (brandId) {\r",
											"    if (brandId !== brandId.toUpperCase()) {\r",
											"        let upperBrandId = brandId.toUpperCase();\r",
											"            console.log(\"Value upperBrandId:\", upperBrandId);\r",
											"\r",
											"        pm.variables.set(\"post_brand_id\", upperBrandId);\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{post_brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{post_brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9_GET_BrandByNonExistIDSymbol",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"// There is no description of this error in the Swagger. \r",
											"// Let's say ER is status code 400\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"// There is no header description for this case\r",
											"// Let's say I got the expected header\r",
											"pm.test(\" header  Connection= close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('close');\r",
											"});\r",
											"\r",
											"// There is no header description for this case\r",
											"// Let's say I got the expected header\r",
											"pm.test(\" header  Content-Type=text/html; charset=iso-8859-1\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html; charset=iso-8859-1');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/brands/%",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"%"
									]
								}
							},
							"response": []
						},
						{
							"name": "10_GET_BrandByNonExistIDNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error message is correct: Requested item not found\", function () {\r",
											"     pm.expect(pm.response.json().message).to.equal(\"Requested item not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/brands/25555",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"25555"
									]
								}
							},
							"response": []
						},
						{
							"name": "11_GET_BrandByIDMethodNotAllowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error message is correct: Method is not allowed for the requested route\", function () {\r",
											"     pm.expect(pm.response.json().message).to.equal(\"Method is not allowed for the requested route\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/brands/{{post_brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{post_brand_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET_BrandByName",
					"item": [
						{
							"name": "12_GET_BrandByName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains the expected slug and id according to the brand name\", function () {\r",
											"    const jsonRes = pm.response.json()[0];\r",
											"    const expectedId = pm.collectionVariables.get(\"post_brand_id\");\r",
											"    const expectedSlug = pm.collectionVariables.get(\"post_slug\");\r",
											"\r",
											"    pm.expect(jsonRes.id).to.eql(expectedId);\r",
											"    pm.expect(jsonRes.slug).to.eql(expectedSlug);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains the same name as in request\", function() {\r",
											"    const brandNameInUrl = pm.request.url.query.find(p => p.key === \"q\").value;\r",
											"    const nameInResponse = pm.response.json()[0].name;\r",
											"    pm.expect(nameInResponse).to.eql(brandNameInUrl);\r",
											"});\r",
											"\r",
											"let schema =\r",
											"\r",
											"     {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\",\r",
											"        },\r",
											"        \"slug\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"name\",\r",
											"        \"slug\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/search?q={{post_name}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "{{post_name}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "13_GET_BrandByNonExistName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//for this case ER: the message \"\"Resource not found\"\" in the response body, but there is an empty array\r",
											"//so, I got a bug \"GET_There is an empty array in the response body in case invalid Brand name in url request\"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"pm.test(\"Resource not found\", function()\r",
											"    {\r",
											"        pm.expect(pm.response.json().message).to.eql(\"Resource not found\");\r",
											"    }\r",
											")\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/search/?q=mmm",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"search",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "mmm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "14_GET_BrandByNameMethodNotAllowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct = Method is not allowed for the requested route\", function()\r",
											"    {\r",
											"        pm.expect(pm.response.json().message).to.eql(\"Method is not allowed for the requested route\");\r",
											"    }\r",
											")\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/search?q={{post_name}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "{{post_name}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "15_GET_BrandByNameUppercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"//ID and slug is not a constant, so I check it separately, not inside the schema, using \"enum\": [post_brand_id]\r",
											"pm.test(\"id and slug in request = id and slug in JSON\", function() {\r",
											"   \r",
											"    const jsonRes = pm.response.json()[0];\r",
											"    const expectedId = pm.collectionVariables.get(\"post_brand_id\");\r",
											"    const expectedSlug = pm.collectionVariables.get(\"post_slug\");\r",
											"\r",
											"     pm.expect(jsonRes.id).to.eql(expectedId);\r",
											"     pm.expect(jsonRes.slug).to.eql(expectedSlug);\r",
											"});\r",
											"\r",
											"//Name is not a constant, so I check it separately, not inside the schema, using \"enum\": [post_name]\r",
											"pm.test(\"Name in URL = Name in JSON\", function() {\r",
											"    const brandName = pm.collectionVariables.get(\"post_name\");\r",
											"    const nameJSON = pm.response.json()[0].name;\r",
											"    pm.expect(nameJSON).to.eql(brandName);\r",
											"});\r",
											"\r",
											"\r",
											"let schema =\r",
											"\r",
											"     {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\",\r",
											"        },\r",
											"        \"slug\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"name\",\r",
											"        \"slug\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//I check if name is uppercase and if no ->> convert it to uppercase and set ->> make request ->> check (in post-response) if I got the same name in the response\r",
											"\r",
											"let brandName = pm.variables.get(\"post_name\");\r",
											"console.log(\"brandName variable value:\", brandName);\r",
											"\r",
											"if (brandName) {\r",
											"    if (brandName !== brandName.toUpperCase()) {\r",
											"        let upperBrandName = brandName.toUpperCase();\r",
											"            console.log(\"Value upperBrandName:\", upperBrandName);\r",
											"\r",
											"        pm.variables.set(\"post_name\", upperBrandName);\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/search?q={{post_name}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "{{post_name}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "16_GET_BrandByNameAbsent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//there is no info about this case in swagger\r",
											"//let's say I got expected result - all available Brands\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"let schema =\r",
											"\r",
											"     {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\",\r",
											"         // \"enum\": [\"123\"]\r",
											"        },\r",
											"        \"slug\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"name\",\r",
											"        \"slug\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is Array and inside >=2 objects\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(Array.isArray(jsonData), \"Response should be an array\").to.be.true;\r",
											"    pm.expect(jsonData.length, \"Array should have at least 2 objects\").to.be.at.least(2);\r",
											"    pm.expect(jsonData.every(item => typeof item === 'object' && item !== null), \"Each item should be an object\").to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/search?q=",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "17_GET_BrandByName=%",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Swagger has no information about the response content when using special characters instead of the name parameter value. \r",
											"//Therefore, for simplicity, I will check only special characters in separate tests: %, &, @\r",
											"//let's say I got unexpected result - all available brands in the response\r",
											"\r",
											"//ER for this case is code 400 and will be good if there is an error message e.g. \"message\": \"Malformed URI\"\r",
											"//so, this is a bug \"GET_All available brands in the response while /q=% instead of code 400\"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/search?q=%",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "%"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "18_GET_BrandByName=&",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Swagger has no information about the response content when using special characters instead of the name parameter value. \r",
											"//Therefore, for simplicity, I will check only special characters in separate tests: %, &, @\r",
											"\r",
											"//In this test let's say I got unexpected result - all available brands in the response\r",
											"\r",
											"//ER for this case is code 400 and will be good if there is a clear error message e.g.  \"error\": \"Malformed query parameter\"\r",
											"//so, this is a bug \"GET_All available brands in the response while /q=& instead of code 400\"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/search?q=&",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": ""
										},
										{
											"key": "",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "19_GET_BrandByName=@",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Swagger has no information about the response content when using special characters instead of the name parameter value. \r",
											"//Therefore, for simplicity, I will check only special characters in separate tests: %, &, @\r",
											"\r",
											"//let's say I got expected result - empty array in the response\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/search?q=@",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "@"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT_BrandID",
					"item": [
						{
							"name": "40_PUT_BrandIDUpdateCreatedBrand",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct = success: true\", function()\r",
											"    {\r",
											"        pm.expect(pm.response.json().success).to.eql(true);\r",
											"    }\r",
											")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.collectionVariables.set(\"put_name\", `Brand${randomInt}`);\r",
											"pm.collectionVariables.set(\"put_slug\", `brand-${randomInt}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"new-name{{put_name}}\",\r\n  \"slug\": \"new-slug{{put_slug}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{post_brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{post_brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "41_PUT_BrandIDUpdateNonExistBrandID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct = success: false\", function()\r",
											"    {\r",
											"        pm.expect(pm.response.json().success).to.eql(false);\r",
											"    }\r",
											")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"new\",\r\n  \"slug\": \"a\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/01JPW5RPPF64Y1Z04JRC3NTH4q",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"01JPW5RPPF64Y1Z04JRC3NTH4q"
									]
								}
							},
							"response": []
						},
						{
							"name": "42_PUT_BrandIDMethodNotAllowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\" error message is correct = Method is not allowed for the requested route\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Method is not allowed for the requested route\")\r",
											"    })"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name-method-not-allowed\",\r\n  \"slug\": \"slug-method-not-allowed\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{post_brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{post_brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "43_PUT_BrandIDUpdateNameEmptySlugAbsent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// For simplicity, here in my portfolio I check only a few paired negative values ​​in both mandatory fields. There are many more of these checks. \r",
											"//To optimize the process, I used an online tool to generate pairs of values.\r",
											"\r",
											"//Swagger has no info about these error messages and ER in this case - need to add description about it into documentation\r",
											"//but in the response body we have not clear error messages for name and slug and code 422. So, Brand isn't updated\r",
											"//also in this case there are bugs: \"Not clear message in case field name is empty\" and \"No any error message in case field slug is absent\"\r",
											"//should be an error message for slug as well\r",
											"\r",
											"//let's say code 422 is expected\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//let's say should be error message like this\r",
											"//bug \"PUT_Not clear error message in case \"name\": \"\" (empty)\"\r",
											"pm.test(\"Message is correct = The name field cannot be empty.\", function()\r",
											"    {\r",
											"        pm.expect(pm.response.json().name[0]).to.eql(\"The name field cannot be empty.\"\r",
											");\r",
											"    }\r",
											")\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{post_brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{post_brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "44_PUT_BrandUpdateNameIntegerSlugSymbol",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//let's say code 422 is expected\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct = The slug field must only contain letters, numbers, dashes, and underscores.\", function()\r",
											"    {\r",
											"        pm.expect(pm.response.json().slug[0]).to.eql(\"The slug field must only contain letters, numbers, dashes, and underscores.\"\r",
											");\r",
											"    }\r",
											")\r",
											"\r",
											"pm.test(\"Message is correct = The name field must be a string.\", function()\r",
											"    {\r",
											"        pm.expect(pm.response.json().name[0]).to.eql(\"The name field must be a string.\"\r",
											");\r",
											"    }\r",
											")\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": 123,\r\n  \"slug\": \"%\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{post_brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{post_brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "45_PUT_BrandUpdateNameAbsentSlugNull",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//let's say code 422 is expected\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"slug\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{post_brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{post_brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "46_PUT_BrandUpdateNameSymbolSlugInteger",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//let's say code 422 is expected\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct = The slug field must be a string.\", function()\r",
											"    {\r",
											"        pm.expect(pm.response.json().slug[0]).to.eql(\"The slug field must be a string.\");\r",
											"    }\r",
											")\r",
											"\r",
											"//Bug: PUT: No error message for name field if entered data is symbol (\"name\"= \"%\")  \r",
											"//let's say should be error message like this\r",
											"pm.test(\"NAME error message is correct = The name field must only contain letters, numbers, dashes, and underscores.\", function () {\r",
											"    pm.expect(pm.response.json().name[0]).to.eql(\"The name field must only contain letters, numbers, dashes, and underscores.\")\r",
											"    })"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\": \"%\",\r\n  \"slug\": 123\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{post_brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{post_brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "47_PUT_BrandUpdateNameNullSlugEmpty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Swagger has no info about these error messages and ER in this case - need to add description about it into documentation\r",
											"//but in the response body I have not clear error messages for name and slug and code 422. So, Brand isn't updated\r",
											"//also in this case there are bug:  \"PUT_No any error message in case field slug is absent\"\r",
											"\r",
											"//let's say code 422 is expected\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//let's say should be error message like this\r",
											"//bug \"PUT_Not clear error message in case \"name\": null\"\r",
											"pm.test(\"Message is correct = The name field cannot be null.\", function()\r",
											"    {\r",
											"        pm.expect(pm.response.json().name[0]).to.eql(\"The name field cannot be null.\"\r",
											");\r",
											"    }\r",
											")\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": null,\r\n  \"slug\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{post_brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{post_brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "48_PUT_BrandUpdateUppercaseFieldNameValue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"//Swagger has no info about ER in this case - need to add description about it into documentation\r",
											"//but in the response body I got clear message  about Brand is not updated, so let's say this is a Bug:\r",
											"// \"PUT_Brand is not updated in case uppercase field name values\"\r",
											"\r",
											"\r",
											"//let's say code 200 is expected\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//let's say in the response should be message like this:\r",
											"pm.test(\"Message is correct = success: true\", function()\r",
											"    {\r",
											"        pm.expect(pm.response.json().success).to.eql(true);\r",
											"    }\r",
											")\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.collectionVariables.set(\"uppercase_put_name\", `NAME${randomInt}`);\r",
											"pm.collectionVariables.set(\"uppercase_put_slug\", `BRAND-${randomInt}`);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{uppercase_put_name}}\",\r\n  \"slug\": \"{{uppercase_put_slug}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{post_brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{post_brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "49_PUT_BrandUpdateUppercaseFieldNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Swagger has no info about ER in this case - need to add description about it into documentation\r",
											"//but in the response body I got clear messages about Brand is updated - let's say this is correct ER\r",
											"\r",
											"//let's say code 200 is expected\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//according to documentation JSON is case sensitive, but for simplicity let's say in the response should be message like this:\r",
											"pm.test(\"Message is correct = success: true\", function()\r",
											"    {\r",
											"        pm.expect(pm.response.json().success).to.eql(true);\r",
											"    }\r",
											")\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.collectionVariables.set(\"uppercase_field_names_put_NAME\", `name${randomInt}`);\r",
											"pm.collectionVariables.set(\"uppercase_field_names_put_SLUG\", `brand-${randomInt}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"NAME\": \"{{uppercase_field_names_put_NAME}}\",\r\n  \"SLUG\": \"{{uppercase_field_names_put_SLUG}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{post_brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{post_brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "50_PUT_BrandUpdateFieldOrderVariation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Swagger has no info about ER in this case - need to add description about it into documentation\r",
											"//but in the response body I got clear messages about Brand is updated - let's say this is correct ER\r",
											"\r",
											"//let's say code 200 is expected\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//for simplicity let's say in the response should be message like this:\r",
											"pm.test(\"Message is correct = success: true\", function()\r",
											"    {\r",
											"        pm.expect(pm.response.json().success).to.eql(true);\r",
											"    }\r",
											")\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.collectionVariables.set(\"field_order_variation_put_name\", `name${randomInt}`);\r",
											"pm.collectionVariables.set(\"field_order_variation_put_slug\", `brand-${randomInt}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"slug\": \"{{field_order_variation_put_slug}}\",\r\n  \"name\": \"{{field_order_variation_put_name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{post_brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{post_brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "51_PUT_BrandUpdateArrayInsteadObject",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Swagger has no info about ER in this case - need to add description about it into documentation\r",
											"//in the response body I got clear messages about Brand is updated - this is a bug\r",
											"//\"PUT_Incorrect response in case if an array is sent in the request instead of an object\"\r",
											"\r",
											"//let's say code 400 is expected\r",
											"//bug \"PUT_Code 200 in the response in case if an array is sent in the request instead of an object\"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//let's say should be an error message like this:\r",
											"//so, bug \"PUT_No error message in the response in case if an array is sent in the request instead of an object\"\r",
											"pm.test(\"Error message is correct = Invalid JSON format: expected an object but received an array\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Invalid JSON format: expected an object but received an array\")\r",
											"    })\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.collectionVariables.set(\"array_instead_object_put_name\", `name${randomInt}`);\r",
											"pm.collectionVariables.set(\"array_instead_object_put_slug\", `brand-${randomInt}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  \"slug\": \"{{array_instead_object_put_slug}}\",\r\n  \"name\": \"{{array_instead_object_put_name}}\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{post_brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{post_brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "52_PUT_BrandUpdateCommaAtTheEnd",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Swagger has no info about ER in this case - need to add description about it into documentation\r",
											"//in the response body I got clear messages about Brand is updated - this is a bug\r",
											"//\"PUT_Brand is updated in case not well formed JSON: comma at the end\"\r",
											"\r",
											"//let's say code 400 is expected\r",
											"//bug \"PUT_Code 200 in the response in case not well formed JSON: comma at the end\"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//let's say should be an error message like this:\r",
											"//so, bug \"PUT_No error message in the response in case not well formed JSON: comma at the end\"\r",
											"pm.test(\"Error message is correct = Invalid JSON format\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Invalid JSON format\")\r",
											"    })\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.collectionVariables.set(\"comma_at_the_end_put_name\", `name${randomInt}`);\r",
											"pm.collectionVariables.set(\"comma_at_the_end_put_slug\", `brand-${randomInt}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"slug\": \"{{comma_at_the_end_put_slug}}\",\r\n  \"name\": \"{{comma_at_the_end_put_name}}\",\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{post_brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{post_brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "53_PUT_BrandUpdateNoCommaAtAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Swagger has no info about ER in this case - need to add description about it into documentation\r",
											"//in the response body I got clear messages about Brand is updated - this is a bug\r",
											"//\"PUT_Brand is updated in case not well formed JSON in request: no comma at all\"\r",
											"\r",
											"//let's say code 400 is expected\r",
											"//bug \"PUT_Code 200 in the response in case not well formed JSON: no comma at all\"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//let's say should be an error message like this:\r",
											"//so, bug \"PUT_No error message in the response in case not well formed JSON: no comma at all\"\r",
											"pm.test(\"Error message is correct = Invalid JSON format\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Invalid JSON format\")\r",
											"    })\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.collectionVariables.set(\"no_comma_at_all_put_name\", `name${randomInt}`);\r",
											"pm.collectionVariables.set(\"no_comma_at_all_put_slug\", `brand-${randomInt}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"slug\": \"{{no_comma_at_all_put_slug}}\"\r\n  \"name\": \"{{no_comma_at_all_put_name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{post_brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{post_brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "54_PUT_BrandUpdateIncompleteKey-ValueFormat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Swagger has no info about ER in this case - need to add description about it into documentation\r",
											"//in the response body I got clear messages about Brand is updated \r",
											"//this is a bug \"PUT_Brand is updated in case if an incomplete JSON is sent\"\r",
											"\r",
											"//let's say code 400 is expected\r",
											"//bug \"PUT_Code 200 in the response in case if an incomplete JSON is sent\"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//let's say should be the error message like this:\r",
											"//so, bug \"PUT_No error message in the response in case if an incomplete JSON is sent\"\r",
											"pm.test(\"Error message is correct = Invalid JSON format\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Invalid JSON format\")\r",
											"    })\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.collectionVariables.set(\"incomplete_key-value_format_put_name\", `name${randomInt}`);\r",
											"pm.collectionVariables.set(\"incomplete_key-value_format_put_slug\", `brand-${randomInt}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{incomplete_key-value_format_put_name}}\",\r\n  \"slug\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{post_brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{post_brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "55_PUT_BrandUpdateDeletedBrand",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Swagger has no info about ER in this case - need to add description about it into documentation\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct = success: false\", function () {\r",
											"    pm.expect(pm.response.json().success).to.eql(false)\r",
											"    })\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomInt = Math.floor(Math.random() * 10000);\r",
											"pm.collectionVariables.set(\"deletrd_brand_put_name\", `name${randomInt}`);\r",
											"pm.collectionVariables.set(\"deletrd_brand_put_slug\", `brand-${randomInt}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{deletrd_brand_put_name}}\",\r\n  \"slug\": \"{{deletrd_brand_put_slug}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{post_brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{post_brand_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE_Brand",
					"item": [
						{
							"name": "56_DELETE_DeleteCreatedBrandByBrandID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//in the endpoint I use setted collection variable band_id in the 20_POST_BrandCreate\r",
											"\r",
											"//impossible to perform Brand deletion, because I don't have an Amin role\r",
											"//therefore the checks in this test are only for example purposes\r",
											"\r",
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct = Unauthorized\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Unauthorized\")\r",
											"    })\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwaS5wcmFjdGljZXNvZnR3YXJldGVzdGluZy5jb20vdXNlcnMvbG9naW4iLCJpYXQiOjE3NDMxNDM5NDcsImV4cCI6MTc0MzE0NDI0NywibmJmIjoxNzQzMTQzOTQ3LCJqdGkiOiJ0UG0xTndhRUFCSUZVSVFIIiwic3ViIjoiMDFqcWRxazRlenpxaGtiMnZrODVrZnBwdG0iLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3Iiwicm9sZSI6InVzZXIifQ._tYmdfUKKzHl6fuaVuBotBCC7BL7ci7CSWPv2rZ5upU",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "57_DELETE_DeleteBrandAlreadyDeleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//impossible to perform Brand deletion, because I don't have an Amin role\r",
											"//therefore the checks in this test are only for example purposes\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {   \r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct = Requested item not found\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Requested item not found\")\r",
											"    })\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwaS5wcmFjdGljZXNvZnR3YXJldGVzdGluZy5jb20vdXNlcnMvbG9naW4iLCJpYXQiOjE3NDMxNDM5NDcsImV4cCI6MTc0MzE0NDI0NywibmJmIjoxNzQzMTQzOTQ3LCJqdGkiOiJ0UG0xTndhRUFCSUZVSVFIIiwic3ViIjoiMDFqcWRxazRlenpxaGtiMnZrODVrZnBwdG0iLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3Iiwicm9sZSI6InVzZXIifQ._tYmdfUKKzHl6fuaVuBotBCC7BL7ci7CSWPv2rZ5upU",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/{{brand_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"{{brand_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "58_DELETE_DeleteCreatedMethodNotAllowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// спочатку створюємо користувача в 12_POST_BrandCreate  - ДОДАТИ КОД\r",
											"// беремо його айді і його видаляємо - ДОДАТИ КОД\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct = Method is not allowed for the requested route\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Method is not allowed for the requested route\")\r",
											"    })\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwaS5wcmFjdGljZXNvZnR3YXJldGVzdGluZy5jb20vdXNlcnMvbG9naW4iLCJpYXQiOjE3NDMxNDM5NDcsImV4cCI6MTc0MzE0NDI0NywibmJmIjoxNzQzMTQzOTQ3LCJqdGkiOiJ0UG0xTndhRUFCSUZVSVFIIiwic3ViIjoiMDFqcWRxazRlenpxaGtiMnZrODVrZnBwdG0iLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3Iiwicm9sZSI6InVzZXIifQ._tYmdfUKKzHl6fuaVuBotBCC7BL7ci7CSWPv2rZ5upU",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/01jqdqk4ezzqhkb2vk85kfpptm",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"01jqdqk4ezzqhkb2vk85kfpptm"
									]
								}
							},
							"response": []
						},
						{
							"name": "59_DELETE_BrandByNonExistIDNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//impossible to perform, because I'm not an admin\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/brands/25555",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"25555"
									]
								}
							},
							"response": []
						},
						{
							"name": "60_DELETE_BrandNonExistURL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//impossible to perform, because I'm not an admin\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct = Resource not found\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Resource not found\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/brand/01jqrn8hmcgbmsfdj5f2ndfvyq",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brand",
										"01jqrn8hmcgbmsfdj5f2ndfvyq"
									]
								}
							},
							"response": []
						},
						{
							"name": "61_DELETE_BrandByIDUppercaseURL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//impossible to perform, because I'm not an admin\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/BRANDS/01jqrnzekt7gh2r687jry00yeq",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BRANDS",
										"01jqrnzekt7gh2r687jry00yeq"
									]
								}
							},
							"response": []
						},
						{
							"name": "62_DELETE_BrandUppercaseID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//impossible to perform, because I'm not an admin\r",
											"\r",
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct = Unauthorized\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Unauthorized\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/brands/01JQRN8HMCGBMSFDJ5F2NDFVYQ",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"01JQRN8HMCGBMSFDJ5F2NDFVYQ"
									]
								}
							},
							"response": []
						},
						{
							"name": "63_DELETE_BrandByNonExistIDSymbol",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//impossible to perform, because I'm not an admin\r",
											"\r",
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct = Unauthorized\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Unauthorized\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/brands/!@#$%^&*()",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"!@"
									],
									"hash": "$%^&*()"
								}
							},
							"response": []
						},
						{
							"name": "64_DELETE_BrandNotAuthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct = Unauthorized\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Unauthorized\")\r",
											"    })\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwaS5wcmFjdGljZXNvZnR3YXJldGVzdGluZy5jb20vdXNlcnMvbG9naW4iLCJpYXQiOjE3NDMxNDM5NDcsImV4cCI6MTc0MzE0NDI0NywibmJmIjoxNzQzMTQzOTQ3LCJqdGkiOiJ0UG0xTndhRUFCSUZVSVFIIiwic3ViIjoiMDFqcWRxazRlenpxaGtiMnZrODVrZnBwdG0iLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3Iiwicm9sZSI6InVzZXIifQ._tYmdfUKKzHl6fuaVuBotBCC7BL7ci7CSWPv2rZ5upU",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/01jqdqk4ezzqhkb2vk85kfpptm",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"01jqdqk4ezzqhkb2vk85kfpptm"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST_RegisterUser",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Test ONE\",\r\n  \"last_name\": \"Test Delete\",\r\n  \"address\": {\r\n    \"street\": \"Street 1\",\r\n    \"city\": \"City\",\r\n    \"state\": \"State\",\r\n    \"country\": \"Country\",\r\n    \"postal_code\": \"1234AA\"\r\n  },\r\n  \"phone\": \"0987654321\",\r\n  \"dob\": \"1970-01-01\",\r\n  \"password\": \"super-secretT1\",\r\n  \"email\": \"john@doe1.example\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST_LoginRegisteredUser",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"john@doe1.example\",\r\n  \"password\": \"super-secretT1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "brand_id",
			"value": ""
		},
		{
			"key": "get_brand_id",
			"value": ""
		},
		{
			"key": "get_brand_name",
			"value": ""
		},
		{
			"key": "get_brand_slug",
			"value": ""
		},
		{
			"key": "post_name",
			"value": ""
		},
		{
			"key": "post_slug",
			"value": ""
		},
		{
			"key": "post_id",
			"value": ""
		},
		{
			"key": "post_brand_id",
			"value": ""
		},
		{
			"key": "diff_post_name",
			"value": ""
		},
		{
			"key": "diff_post_slug",
			"value": ""
		},
		{
			"key": "uppercase_post_name",
			"value": ""
		},
		{
			"key": "uppercase_post_slug",
			"value": ""
		},
		{
			"key": "fields_order_variation_post_name",
			"value": ""
		},
		{
			"key": "fields_order_variation_post_slug",
			"value": ""
		},
		{
			"key": "uppercase_field_NAME_post_name",
			"value": ""
		},
		{
			"key": "uppercase_field_SLUG_post_slug",
			"value": ""
		},
		{
			"key": "incomplete_key-value_post_name",
			"value": ""
		},
		{
			"key": "put_name",
			"value": ""
		},
		{
			"key": "put_slug",
			"value": ""
		},
		{
			"key": "uppercase_put_name",
			"value": ""
		},
		{
			"key": "uppercase_put_slug",
			"value": ""
		},
		{
			"key": "1_put_name",
			"value": ""
		},
		{
			"key": "1_put_slug",
			"value": ""
		},
		{
			"key": "uppercase_field_names_put_NAME",
			"value": ""
		},
		{
			"key": "uppercase_field_names_put_SLUG",
			"value": ""
		},
		{
			"key": "field_order_variation_put_name",
			"value": ""
		},
		{
			"key": "field_order_variation_put_slug",
			"value": ""
		},
		{
			"key": "array_instead_object_put_name",
			"value": ""
		},
		{
			"key": "array_instead_object_put_slug",
			"value": ""
		}
	]
}