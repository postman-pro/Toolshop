{
	"info": {
		"_postman_id": "2f90f032-0f34-4cdb-890d-d091931d2114",
		"name": "ToolshopAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38047370"
	},
	"item": [
		{
			"name": "/Brand",
			"item": [
				{
					"name": "GET_Brands/search",
					"item": [
						{
							"name": "GET_BrandByName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"let schema =\r",
											"\r",
											"     {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\",\r",
											"          \"enum\": [\"123\"]\r",
											"        },\r",
											"        \"slug\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"name\",\r",
											"        \"slug\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/search?q=forgeflex+tools",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "forgeflex+tools"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_BrandByNoExistName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"let schema =\r",
											"\r",
											"     {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\",\r",
											"//          \"enum\": [\"123\"]\r",
											"        },\r",
											"        \"slug\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"name\",\r",
											"        \"slug\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/search/?q=mmm",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"search",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "mmm"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET_Brand and GET_BrandID",
					"item": [
						{
							"name": "1_GET_BrandDefaultRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"//I don’t check these headers because:\r",
											"//access-control-expose-headers – Files are not uploaded via the API.\r",
											"//Cache-Control – There is no need to manage data caching.\r",
											"//charset – browsers and clients automatically handle encoding based on the server response.\r",
											"//transfer-encoding – It is handled automatically.\r",
											"\r",
											"\r",
											"pm.test(\"Response is Array and inside >=2 objects\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(Array.isArray(jsonData), \"Response should be an array\").to.be.true;\r",
											"    pm.expect(jsonData.length, \"Array should have at least 2 objects\").to.be.at.least(2);\r",
											"    pm.expect(jsonData.every(item => typeof item === 'object' && item !== null), \"Each item should be an object\").to.be.true;\r",
											"});\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"array\",\r",
											"  \"items\": \r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"slug\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"    }    \r",
											"}\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ConnectioN",
										"value": "KeeP-AliVe",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "2_GET_BrandWithoutSSL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request protocol HTTP\", function() {\r",
											"    pm.expect(pm.request.url.protocol).to.eql(\"http\")\r",
											"});\r",
											"\r",
											"// EPECTED RESULT: no ER in Swagger but according to my opinion here should be status 301 Moved permanently\r",
											"//AND let's say that in response body we should get the HTML => no need to check the Schema in this test\r",
											"// so, there is 1 Bug and it's documented in Jira\r",
											"pm.test(\"Status code is 301\", function () {\r",
											"    pm.response.to.have.status(301);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "3_GET_BrandInvalidURL%AtTheEnd",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"// There is no description of this error in the Swagger. \r",
											"// Let's say ER is this status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"// There is no header description for this case\r",
											"// Let's say I got the expected header\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('close');\r",
											"});\r",
											"\r",
											"// There is no header description for this case\r",
											"// Let's say I got the expected header\r",
											"pm.test(\" header  Content-Type=text/html; charset=iso-8859-1\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html; charset=iso-8859-1');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/brands%",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands%"
									]
								}
							},
							"response": []
						},
						{
							"name": "4_GET_BrandNonExistURL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('close');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct: Resource not found\", function () {\r",
											"     pm.expect(pm.response.json().message).to.equal(\"Resource not found\");\r",
											"});\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/brands5",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands5"
									]
								}
							},
							"response": []
						},
						{
							"name": "5_GET_BrandUppercaseURL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//there is no information about this in Swagger\r",
											"//but normally url should not be case sensitive\r",
											"//so, here is a bug \"URL {{baseURL}}/BRANDS is case sensitive\"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response is Array and inside >=2 objects\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(Array.isArray(jsonData), \"Response should be an array\").to.be.true;\r",
											"    pm.expect(jsonData.length, \"Array should have at least 2 objects\").to.be.at.least(2);\r",
											"    pm.expect(jsonData.every(item => typeof item === 'object' && item !== null), \"Each item should be an object\").to.be.true;\r",
											"});\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"array\",\r",
											"  \"items\": \r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"slug\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"    }    \r",
											"}\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/BRANDS",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BRANDS"
									]
								}
							},
							"response": []
						},
						{
							"name": "6_GET_BrandMethodNotAllowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"// There is no header description for this case\r",
											"// Let's say I got the expected header\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('close');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct: Method is not allowed for the requested route\", function () {\r",
											"     pm.expect(pm.response.json().message).to.equal(\"Method is not allowed for the requested route\");\r",
											"});\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "7_GET_BrandByID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"let schema =\r",
											"\r",
											"     {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"slug\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"    }    \r",
											"\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"id in URL = id in JSON\", function() {\r",
											"    let idURL = pm.request.url.path[1];\r",
											"     let idJSON = pm.response.json().id;\r",
											"     pm.expect(idJSON).to.eql(idURL);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/01jpj1tzkhnbkvmcwk5vf33r65",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"01jpj1tzkhnbkvmcwk5vf33r65"
									]
								}
							},
							"response": []
						},
						{
							"name": "8_GET_BrandByIDUppercaseID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//I have ID number with lower case\r",
											"//so, here I check the same ID but uppercase\r",
											"//to check that the id in the url is equal to the id in the response, I convert the id from the url to lower case in the test (see test below)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"let schema =\r",
											"\r",
											"     {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"slug\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"    }    \r",
											"\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"id in URL = id in JSON\", function() {\r",
											"     let idURL = pm.request.url.path[1].toLowerCase(); \r",
											"     let idJSON = pm.response.json().id;\r",
											"     pm.expect(idJSON).to.eql(idURL);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands/01JPENQW9WDZBJ0NRTTM0V7XMA",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"01JPENQW9WDZBJ0NRTTM0V7XMA"
									]
								}
							},
							"response": []
						},
						{
							"name": "9_GET_BrandByNonExistIDSymbol",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"// There is no description of this error in the Swagger. \r",
											"// Let's say ER is this status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"// There is no header description for this case\r",
											"// Let's say I got the expected header\r",
											"pm.test(\" header  Connection= close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('close');\r",
											"});\r",
											"\r",
											"// There is no header description for this case\r",
											"// Let's say I got the expected header\r",
											"pm.test(\" header  Content-Type=text/html; charset=iso-8859-1\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html; charset=iso-8859-1');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/brands/%",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"%"
									]
								}
							},
							"response": []
						},
						{
							"name": "10_GET_BrandByNonExistIDNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error message is correct: Requested item not found\", function () {\r",
											"     pm.expect(pm.response.json().message).to.equal(\"Requested item not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/brands/25555",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"25555"
									]
								}
							},
							"response": []
						},
						{
							"name": "11_GET_BrandByIDMethodNotAllowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error message is correct: Method is not allowed for the requested route\", function () {\r",
											"     pm.expect(pm.response.json().message).to.equal(\"Method is not allowed for the requested route\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/brands/01JNR7MJD4VDVJBXH1TJXFYT8T",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands",
										"01JNR7MJD4VDVJBXH1TJXFYT8T"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST_BrandCreate",
					"item": [
						{
							"name": "12_POST_BrandCreate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"name\", pm.response.json().name);\r",
											"pm.collectionVariables.set(\"slug\", pm.response.json().slug);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"name\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [\"new brand9988\"]\r",
											"    },\r",
											"    \"slug\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [\"new-brand9988\"]\r",
											"  },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  //in Swagger name, slug, id are not required\r",
											"  //but we have only 3 fields in the response, so let's check them as required\r",
											"  \"required\": [\r",
											"    \"name\",\r",
											"    \"slug\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"NoName\",\r\n  \"slug\": \"12378\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "13_POST_BrandCreateExistSlug",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//if we need to use setted variable slug in previous test 10, we can do it with this code:\r",
											"//let slug = pm.collectionVariables.get(\"slug\");\r",
											"// and after in this test - to check it in the scheme \"enum\"= [slug] - but here we have an error message\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//Swagger has no info about this case - need to add description about it\r",
											"//but in the response body we have understandable message and code 422. So, new Brand is not created\r",
											"pm.test(\"error message is correct = A brand already exists with this slug.\", function() {\r",
											"        pm.expect(pm.response.json().slug[0]).to.eql(\"A brand already exists with this slug.\")\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"new brand 111\",\r\n  \"slug\": \"new-brand98\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "14_POST_BrandCreateExistName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//if we need to use setted variable slug in previous test 10, we can do it with this code:\r",
											"//let name = pm.collectionVariables.get(\"name\");\r",
											"// and after in this test - to check it in the scheme \"enum\"= [slug] - but here we have an error message\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//Swagger has no info about this case - need to add description about it\r",
											"//let's say it's impossible to create a brand with the same name \r",
											"//so, in this case we have a Bug\r",
											"//error message should be like this, for example\r",
											"pm.test(\"error message is correct = A brand already exists with this name.\", function() {\r",
											"        pm.expect(pm.response.json().name[0]).to.eql(\"A brand already exists with this name.\")\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"new brand 987\",\r\n  \"slug\": \"new-brand98777\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "15_POST_BrandCreateNameNullSlugAbsent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"// For simplicity, here in my portfolio I check only a few paired negative values ​​in both mandatory fields. There are many more of these checks. \r",
											"//To optimize the process, I used an online tool to generate pairs of values.\r",
											"\r",
											"//Swagger has no info about these error messages - need to add description about it\r",
											"//but in the response body we have understandable message for name and slug and code 422. So, new Brand is not created\r",
											"pm.test(\"SLUG error message is correct = The slug field is required.\", function() {\r",
											"        pm.expect(pm.response.json().slug[0]).to.eql(\"The slug field is required.\")\r",
											"})\r",
											"\r",
											"pm.test(\"NAME error message is correct = The name field is required.\", function () {\r",
											"    pm.expect(pm.response.json().name[0]).to.eql(\"The name field is required.\")\r",
											"    })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "16_POST_BrandCreateNameIntegerSlugEmpty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"// For simplicity, here in my portfolio I check only a few paired negative values ​​in both mandatory fields. There are many more of these checks. \r",
											"//To optimize the process, I used an online tool to generate pairs of values.\r",
											"\r",
											"//Swagger has no info about these error messages - need to add description about it\r",
											"//but in the response body we have understandable message for name and slug and code 422. So, new Brand is not created\r",
											"pm.test(\"SLUG error message is correct = The slug field is required.\", function() {\r",
											"        pm.expect(pm.response.json().slug[0]).to.eql(\"The slug field is required.\")\r",
											"})\r",
											"\r",
											"pm.test(\"NAME error message is correct = The name field must be a string.\", function () {\r",
											"    pm.expect(pm.response.json().name[0]).to.eql(\"The name field must be a string.\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": 987,\r\n  \"slug\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "17_POST_BrandCreateNameSymbolSlugInteger",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"// For simplicity, here in my portfolio I check only a few paired negative values ​​in both mandatory fields. There are many more of these checks. \r",
											"//To optimize the process, I used an online tool to generate pairs of values.\r",
											"\r",
											"//Swagger has no info about these error messages - need to add description about it\r",
											"//but in the response body we have understandable message for slug and code 422. So, new Brand is not created\r",
											"pm.test(\"SLUG error message is correct = The slug field must be a string.\", function() {\r",
											"        pm.expect(pm.response.json().slug[0]).to.eql(\"The slug field must be a string.\")\r",
											"})\r",
											"\r",
											"//Bug: No error message for name field if entered data is symbol (\"name\"= \"%\")  \r",
											"//let's say should be error message like this\r",
											"pm.test(\"NAME error message is correct = The slug field must only contain letters, numbers, dashes, and underscores.\", function () {\r",
											"    pm.expect(pm.response.json().name[0]).to.eql(\"The slug field must only contain letters, numbers, dashes, and underscores.\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"%\",\r\n  \"slug\": 987\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "18_POST_BrandCreateNameAbsentSlugNull",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"// For simplicity, here in my portfolio I check only a few paired negative values ​​in both mandatory fields. There are many more of these checks. \r",
											"//To optimize the process, I used an online tool to generate pairs of values.\r",
											"\r",
											"//Swagger has no info about these error messages - need to add description about it\r",
											"//but in the response body we have understandable message for name and slug and code 422. So, new Brand is not created\r",
											"pm.test(\"SLUG error message is correct = The slug field is required.\", function() {\r",
											"        pm.expect(pm.response.json().slug[0]).to.eql(\"The slug field is required.\")\r",
											"})\r",
											"\r",
											"pm.test(\"NAME error message is correct = The name field is required.\", function () {\r",
											"    pm.expect(pm.response.json().name[0]).to.eql(\"The name field is required.\")\r",
											"    })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"slug\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "19_POST_BrandCreateNameEmptySlugSymbol",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"// For simplicity, here in my portfolio I check only a few paired negative values ​​in both mandatory fields. There are many more of these checks. \r",
											"//To optimize the process, I used an online tool to generate pairs of values.\r",
											"\r",
											"//Swagger has no info about these error messages - need to add description about it\r",
											"//but in the response body we have understandable message for name and slug and code 422. So, new Brand is not created\r",
											"pm.test(\"SLUG error message is correct = The slug field must only contain letters, numbers, dashes, and underscores.\", function() {\r",
											"        pm.expect(pm.response.json().slug[0]).to.eql(\"The slug field must only contain letters, numbers, dashes, and underscores.\")\r",
											"})\r",
											"\r",
											"pm.test(\"NAME error message is correct = The name field is required.\", function () {\r",
											"    pm.expect(pm.response.json().name[0]).to.eql(\"The name field is required.\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"slug\": \"%\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "20_POST_BrandCreateMethodNotAllowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"//let's say this is expected header\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\" error message is correct = Method is not allowed for the requested route\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Method is not allowed for the requested route\")\r",
											"    })\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"new brand9988\",\r\n  \"slug\": \"new-brand9988\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "21_POST_BrandCreateUppercaseFieldNameValues",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"name\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [\"new BRANDbrand9988\"]\r",
											"    },\r",
											"    \"slug\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [\"new-BRANDbrand9988\"]\r",
											"  },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  //in Swagger name, slug, id are not required\r",
											"  //but we have only 3 fields in the response, so let's check them as required\r",
											"  \"required\": [\r",
											"    \"name\",\r",
											"    \"slug\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"new BRANDbrand9988\",\r\n  \"slug\": \"new-BRANDbrand9988\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "22_POST_BrandCreateFieldsOrderVariation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"//let's say this is expected header\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"name\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [\"new brand99881\"]\r",
											"    },\r",
											"    \"slug\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [\"new-brand99881\"]\r",
											"  },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  //in Swagger name, slug, id are not required\r",
											"  //but we have only 3 fields in the response, so let's check them as required\r",
											"  \"required\": [\r",
											"    \"name\",\r",
											"    \"slug\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"slug\": \"new-brand99881\",\r\n    \"name\": \"new brand99881\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "23_POST_BrandCreateUppercaseFieldNames",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//This test failed with code 422 and understandable error messages\r",
											"//this is not important bug and there is no info about it in Swagger  \r",
											"//so, we can create a bag \"Field names are case sensitive\" with Severity S4 or S5 (Minor or Trivial)\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"name\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [\"new brand9988\"]\r",
											"    },\r",
											"    \"slug\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [\"new-brand9988\"]\r",
											"  },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  //in Swagger name, slug, id are not required\r",
											"  //but we have only 3 fields in the response, so let's check them as required\r",
											"  \"required\": [\r",
											"    \"name\",\r",
											"    \"slug\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"NAME\": \"new brand991\",\r\n  \"SLUG\": \"new-brand991\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "24_POST_BrandCreateMaxLengthFieldsValue160",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//there is no info in Swagger about max length for both fields, so let's check it\r",
											"//start from 160 letters\r",
											"//in this case we got understandable error message\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"name\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [\"new brand9988\"]\r",
											"    },\r",
											"    \"slug\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [\"new-brand9988\"]\r",
											"  },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  //in Swagger name, slug, id are not required\r",
											"  //but we have only 3 fields in the response, so let's check them as required\r",
											"  \"required\": [\r",
											"    \"name\",\r",
											"    \"slug\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an\",\r\n  \"slug\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "25_POST_BrandCreateMaxLengthFieldsValue121",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//in this case we got understandable error message\r",
											"//Error 422 is expected\r",
											"//For slug field there is two error messages, I'll check it later separately\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\" error message is correct = The name field must not be greater than 120 characters.\", function () {\r",
											"    pm.expect(pm.response.json().name[0]).to.eql(\"The name field must not be greater than 120 characters.\")\r",
											"    });\r",
											"\r",
											"    pm.test(\" error message is correct = The slug field must not be greater than 120 characters.\", function () {\r",
											"    pm.expect(pm.response.json().slug[0]).to.eql(\"The slug field must not be greater than 120 characters.\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard d\",\r\n  \"slug\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard d\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "26_POST_BrandCreateMaxLengthFieldsValue120",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//here I got error code 422 with incorrect error message\r",
											"//because max length is 120 letters and this test should Pass\r",
											"//so, I can create a bug \"Response error code 422 while field values have max length 120 characters \"\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"name\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standardr\"]\r",
											"    },\r",
											"    \"slug\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standardr\"]\r",
											"  },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  //in Swagger name, slug, id are not required\r",
											"  //but we have only 3 fields in the response, so let's check them as required\r",
											"  \"required\": [\r",
											"    \"name\",\r",
											"    \"slug\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standardr\",\r\n  \"slug\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standardr\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "27_POST_BrandCreateMaxLengthFieldsValue119",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//here I got an error code 422 with incorrect error message\r",
											"//because max length is 120 letters and this test should Pass\r",
											"//so, I can create a bug \"Response error code 422 while field values have max length 120 and 119 characters \"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"let schema =\r",
											"{\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"name\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standardr\"]\r",
											"    },\r",
											"    \"slug\": {\r",
											"      \"type\": \"string\",\r",
											"      \"enum\": [\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standardr\"]\r",
											"  },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  //in Swagger name, slug, id are not required\r",
											"  //but we have only 3 fields in the response, so let's check them as required\r",
											"  \"required\": [\r",
											"    \"name\",\r",
											"    \"slug\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standardr\",\r\n  \"slug\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standardr\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "28_POST_BrandCreateArrayInsteadObject",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//in response I got not clear error message\r",
											"//so, here is a bug \"Incorrect error message in case not well formed JSON:Array instead an Object\"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\" error message is correct = \"Example of the correct message\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Example of the correct message\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  \"name\": \"new brand9988\",\r\n  \"slug\": \"new-brand9988\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "29_POST_BrandCreateCommaAtTheEnd",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//in response I got not clear error message\r",
											"//so, here is a bug \"Incorrect error message in case not well formed JSON:Comma at the end\"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"error message is correct = Example of the correct message\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Example of the correct message\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"new brand9988\",\r\n  \"slug\": \"new-brand9988\",\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "30_POST_BrandCreateNoCommaAtAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//in response I got not clear error message\r",
											"//so, here is a bug \"Incorrect error message in case not well formed JSON:NoCommaAtAll\"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"error message is correct = Example of the correct message\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Example of the correct message\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"new brand9988\"\r\n  \"slug\": \"new-brand9988\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "31_POST_BrandCreateIncompleteKey-ValueFormat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//in response I got not clear error message\r",
											"//so, here is a bug \"Incorrect error message in case not well formed JSON:IncompleteKey-ValueFormat\"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
											"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
											"});\r",
											"\r",
											"pm.test(\" header  Content-Type=application/json\", function () {\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"error message is correct = Example of the correct message\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Example of the correct message\")\r",
											"    })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"new brand9988\",\r\n  \"slug\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/brands",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"brands"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "slug",
			"value": ""
		}
	]
}