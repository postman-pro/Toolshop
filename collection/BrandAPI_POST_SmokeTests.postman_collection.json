{
	"info": {
		"_postman_id": "904bbfd4-88ae-4d77-9750-25324e08ea47",
		"name": "BrandAPI_POST_SmokeTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38047370"
	},
	"item": [
		{
			"name": "SETUP",
			"item": [
				{
					"name": "Set_Schemas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let retrieveAllBrands =\r",
									"{\r",
									"  \"type\": \"array\",\r",
									"  \"items\": \r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"slug\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"    },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"slug\",\r",
									"    \"id\"\r",
									"  ]   \r",
									"}\r",
									"\r",
									"let deleteSpecificBrand = \r",
									"{\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.environment.set(\"deleteSpecificBrand\", JSON.stringify(deleteSpecificBrand));\r",
									"pm.environment.set(\"retrieveAllBrands\", JSON.stringify(retrieveAllBrands));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/brands",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"brands"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST",
			"item": [
				{
					"name": "20_POST_BrandCreate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//I need to set a collection variable 'post_brand_id'\r",
									"//because I will use it in another request below\r",
									"let jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"post_brand_id\", jsonData.id);\r",
									"\r",
									"pm.test(\"Status  code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
									"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
									"});\r",
									"\r",
									"let post_name = pm.variables.get(\"post_name\"); // Define post_name variable\r",
									"let post_slug = pm.variables.get(\"post_slug\");\r",
									"\r",
									"let schema =\r",
									"{\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [post_name]\r",
									"    },\r",
									"    \"slug\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [post_slug]\r",
									"  },\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  //in Swagger name, slug, id are not required\r",
									"  //but we have only these 3 fields in the response, so let's check them as required\r",
									"  \"required\": [\r",
									"    \"name\",\r",
									"    \"slug\",\r",
									"    \"id\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//I need to set a collection variables 'post_name', 'post_slug' with random numbers\r",
									"//because I will use them in another request below\r",
									"\r",
									"let randomInt = Math.floor(Math.random() * 10000);\r",
									"pm.collectionVariables.set(\"post_name\", `Brand${randomInt}`);\r",
									"pm.collectionVariables.set(\"post_slug\", `brand-${randomInt}`);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{post_name}}\",\r\n  \"slug\": \"{{post_slug}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/brands",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"brands"
							]
						}
					},
					"response": []
				},
				{
					"name": "21_POST_BrandCreateExistSlug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//in the Swagger there is no info about this case - need to add description about it\r",
									"//but in the response body I got understandable message and code 422. So, new Brand is not created\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"header Content-Type=application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"error message is correct = A brand already exists with this slug.\", function () {\r",
									"    pm.expect(pm.response.json().slug[0]).to.eql(\"A brand already exists with this slug.\")\r",
									"});\r",
									"\r",
									"pm.variables.unset(\"diff_post_name\"); \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//in the body I need to use name different from the previous test 20_POST_BrandCreate\r",
									"//so, here I set a new variable \"diff_post_name\"\r",
									"\r",
									"let randomInt = Math.floor(Math.random() * 10000);\r",
									"pm.variables.set(\"diff_post_name\", `Brand${randomInt}`);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"name{{diff_post_name}}\",   // I use a new name\r\n  \"slug\": \"{{post_slug}}\"             // but slug is the same as 20_POST_BrandCreate\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/brands",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"brands"
							]
						}
					},
					"response": []
				},
				{
					"name": "22F_POST_BrandCreateExistName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Swagger has no info about this case - need to add description about it\r",
									"//let's say it's impossible to create a brand with the same name \r",
									"//so, in this case we have a Bug \"POST_Possible to create a brand with the same name\" \r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\" header  Content-Type=application/json\", function () {\r",
									"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"//error message should be like this, for example\r",
									"pm.test(\"error message is correct = A brand already exists with this name.\", function() {\r",
									"        pm.expect(pm.response.json().name[0]).to.eql(\"A brand already exists with this name.\")\r",
									"})\r",
									"\r",
									"pm.variables.unset(\"diff_post_slug\"); \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//in the request body I need to use slug different from the previous test 20_POST_BrandCreate\r",
									"//so, here I set a new variable \"diff_post_slug\"\r",
									"\r",
									"let randomInt = Math.floor(Math.random() * 10000);\r",
									"pm.variables.set(\"diff_post_slug\", `Brand${randomInt}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{post_name}}\",\r\n  \"slug\": \"slug{{diff_post_slug}}\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/brands",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"brands"
							]
						}
					},
					"response": []
				},
				{
					"name": "28_POST_BrandCreateMethodNotAllowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"//let's say this is expected header\r",
									"pm.test(\" header  Content-Type=application/json\", function () {\r",
									"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\" error message is correct = Method is not allowed for the requested route\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Method is not allowed for the requested route\")\r",
									"    })\r",
									"\r",
									"pm.variables.unset(\"wrong_method_post_name\");\r",
									"pm.variables.unset(\"wrong_method_post_slug\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomInt = Math.floor(Math.random() * 10000);\r",
									"pm.variables.set(\"wrong_method_post_name\", `Brand${randomInt}`);\r",
									"pm.variables.set(\"wrong_method_post_slug\", `brand-${randomInt}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{wrong_method_post_name}}\",\r\n  \"slug\": \"{{wrong_method_post_slug}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/brands",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"brands"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}