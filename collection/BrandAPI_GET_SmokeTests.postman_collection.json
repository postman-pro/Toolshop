{
	"info": {
		"_postman_id": "5ef12d6e-9d4c-4d5b-9392-3c595c5a5333",
		"name": "BrandAPI_GET_SmokeTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38047370"
	},
	"item": [
		{
			"name": "SETUP",
			"item": [
				{
					"name": "Set_Schemas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let retrieveAllBrands =\r",
									"{\r",
									"  \"type\": \"array\",\r",
									"  \"items\": \r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"slug\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"    },\r",
									"    \"required\": [\r",
									"    \"name\",\r",
									"    \"slug\",\r",
									"    \"id\"\r",
									"  ]   \r",
									"}\r",
									"\r",
									"let deleteSpecificBrand = \r",
									"{\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.environment.set(\"deleteSpecificBrand\", JSON.stringify(deleteSpecificBrand));\r",
									"pm.environment.set(\"retrieveAllBrands\", JSON.stringify(retrieveAllBrands));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/brands",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"brands"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET_Brand",
			"item": [
				{
					"name": "1_GET_BrandDefaultRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"get_brand_id\", pm.response.json()[0].id);\r",
									"pm.collectionVariables.set(\"get_brand_name\", pm.response.json()[0].name);\r",
									"pm.collectionVariables.set(\"get_brand_slug\", pm.response.json()[0].slug);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
									"     pm.expect(pm.response.headers.get('Connection')).to.include('Upgrade, close');\r",
									"});\r",
									"\r",
									"pm.test(\" header  Content-Type=application/json;charset=UTF-8\", function () {\r",
									"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json;charset=UTF-8');\r",
									"});\r",
									"\r",
									"//I don’t check these headers because\r",
									"//access-control-expose-headers – Files are not uploaded via the API.\r",
									"//Cache-Control – There is no need to manage data caching.\r",
									"//charset – browsers and clients automatically handle encoding based on the server response.\r",
									"//transfer-encoding – It is handled automatically.\r",
									"\r",
									"pm.test(\"Response is Array and inside >=2 objects\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData), \"Response should is array\").to.be.true;\r",
									"    pm.expect(jsonData.length, \"Array should have at least 2 objects\").to.be.at.least(2);\r",
									"    pm.expect(jsonData.every(item => typeof item === 'object' && item !== null), \"Each item should be an object\").to.be.true;\r",
									"   });\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"retrieveAllBrands\"));\r",
									"\r",
									"pm.test(\"Json schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ConnectioN",
								"value": "KeeP-AliVe",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURL}}/brands",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"brands"
							]
						}
					},
					"response": []
				},
				{
					"name": "6_GET_BrandMethodNotAllowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"// There is no header description for this case\r",
									"// Let's say I got the expected header\r",
									"pm.test(\" header  Connection=Upgrade, close\", function () {\r",
									"     pm.expect(pm.response.headers.get('Connection')).to.include('close');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\" header  Content-Type=application/json\", function () {\r",
									"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is correct: Method is not allowed for the requested route\", function () {\r",
									"     pm.expect(pm.response.json().message).to.equal(\"Method is not allowed for the requested route\");\r",
									"});\r",
									"\r",
									"let schema =\r",
									"{\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  }\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/brands",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"brands"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}